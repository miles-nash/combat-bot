//controller pins
const int CH_1 = 9;
const int CH_2 = 10;

//spinner values
String lastMaxMin;
int maxoutCount = 0;
int minoutCount = 0;
int lastMaxout = 0;
int lastMinout = 0;
int totalMaxoutTimeout = 400;
int spinnerTimeout = 2000;
int lastSpinner = 0;
bool spinner = false;

//motor driver pins
const int STBY_PIN = 2;
const int AIN1_PIN = 3;
const int AIN2_PIN = 4;
const int APWM_PIN = A0;
const int BIN1_PIN = 5;
const int BIN2_PIN = 6;
const int BPWM_PIN = A1;

const int spinSTBY_PIN = 8;
const int spinAIN1_PIN = 11;
const int spinAIN2_PIN = 12;
const int spinAPWM_PIN = A5;


void setup() {
  Serial.begin(9600);

  //configure pins
  pinMode(STBY_PIN, OUTPUT);
  pinMode(AIN1_PIN, OUTPUT);
  pinMode(AIN2_PIN, OUTPUT);
  pinMode(APWM_PIN, OUTPUT);
  pinMode(BIN1_PIN, OUTPUT);
  pinMode(BIN2_PIN, OUTPUT);
  pinMode(BPWM_PIN, OUTPUT);
  /*pinMode(spinSTBY_PIN, OUTPUT);
  pinMode(spinAIN1_PIN, OUTPUT);
  pinMode(spinAIN2_PIN, OUTPUT);
  pinMode(spinAPWM_PIN, OUTPUT);
*/
  //Enable motor driver
  digitalWrite(STBY_PIN, HIGH);
  digitalWrite(spinSTBY_PIN, HIGH);


}

void loop() {
  // receive and format motor pwm values from radio controller
  int ch_1 = pulseIn(CH_1, HIGH, 25000);
  int x = pulseToPWM(ch_1);
  delay(10);
  int ch_2 = pulseIn(CH_2, HIGH, 25000);
  int y = pulseToPWM(ch_2);
  Serial.println("Steering: " + String(x) + "  Throttle: " + String(y));
  
  //pass motor values
  int left = x + y;
  int right = y - x;
  drive(left, right);
  
  Serial.println("Left: " + String(left) + " Right: " + String(right));
  Serial.println();
  
 //checkSpinner(x); //update whether the weapon should be spinning
// if (spinner){ 
  //spin
 //}
 delay(10);
}
//positive for forwards, negative for reverse
void drive(int left, int right){

  //limit speed to acceptable pwms
  left = constrain(left, -255, 255);
  right = constrain(right, -255, 255);

  //set motor A direction
  if (left == 0) {
    digitalWrite(AIN1_PIN, LOW);
    digitalWrite(AIN2_PIN, LOW);
  }else if (left > 0) {
    digitalWrite(AIN1_PIN, HIGH);
    digitalWrite(AIN2_PIN, LOW);
  }else{
    digitalWrite(AIN1_PIN, LOW);
    digitalWrite(AIN2_PIN, HIGH);
  }

  //set motor b direction
  if (right == 0){
    digitalWrite(BIN1_PIN, LOW);
    digitalWrite(BIN2_PIN, LOW);
  }else if (right > 0){
    digitalWrite(BIN1_PIN, HIGH);
    digitalWrite(BIN2_PIN, LOW);
  }else{
    digitalWrite(BIN1_PIN, LOW);
    digitalWrite(BIN2_PIN, HIGH);
  }

  //set speed
  analogWrite(APWM_PIN, abs(left));
  analogWrite(BPWM_PIN, abs(right));
}

  
int pulseToPWM(int pulse){
  //change values from receiver into pwm
  int pwm;
  if (pulse > 500){
    pwm = map(pulse,897,2092,-255,255);
    pwm = constrain(pwm, -255, 255);
    if (abs(pwm) <= 10){
      pwm = 0;
    }
    if (abs(pwm) >=240){
      if(pwm <0){
        pwm = -255;
      }else{
        pwm = 255;
      }
    }
  }
  else{
    pwm = 0;
  }
  return pwm;
}

void checkSpinner(int steering){
//
 //setup activation/deactivation of spinny thing with 6 quick back and forths of the steering
 //

 //identify each back/forth
 if(steering == 255 && lastMaxMin != "max"){
  maxoutCount ++;
  lastMaxout = millis();
  lastMaxMin = "steering";
 }

 if(steering == -255 && lastMaxMin != "min"){
  minoutCount ++;
  lastMinout = millis();
 lastMaxMin = "min";
 }

//ensure each back and forth is quick enough
//and therefore intentional
 if (abs(lastMinout - lastMaxout) >= totalMaxoutTimeout){
  maxoutCount = 0;
  minoutCount = 0;
 }

//toggle spinny thing
 if (maxoutCount >= 3 && minoutCount >= 3){
   //start/ stop spinny motor
   if  (millis() - lastSpinner <= spinnerTimeout){
      maxoutCount = 0;
      minoutCount = 0;
   }else{
      if (spinner == false){
        Serial.println("Spinny Device Activated");
        spinner = true;
        delay(10);
      }else{
        spinner = false;
        Serial.println("Spinny Device Deactivated");
        delay(10);
      }
  
      Serial.println("Spinny Device Activated");
      maxoutCount = 0;
      minoutCount = 0;
      delay(10);
      lastSpinner = millis(); 
  }  
 }
 delay(10);
}
